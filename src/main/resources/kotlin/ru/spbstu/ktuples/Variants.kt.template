@file:Suppress("UNUSED_PARAMETER", "NOTHING_TO_INLINE")
package ru.spbstu.ktuples;
<%
def k = number
%>

// Class declarations
/**
 * Base class for all Variant declarations
 * @property value the boxed value
 * @property index the index of value currently stored in the variant
 */
sealed class VariantBase {
    abstract val value: Any?
    abstract val index: Int
}

fun<T> Variant(index: Int, value: T): VariantBase = when(index) {
<% ((k - 1)..0).each{ m -> %>
    $m -> Variant${m} (value)
<% } /* each m */ %>
    else -> throw IllegalArgumentException("Index \$index too big: max value is ${k - 1}")
}

/**
 * Class that may contain one of $k variants of different types in immutable fashion
 */
sealed class EitherOf${k}< ${k.join{ "out T$it" }} >: VariantBase() {
    companion object {}
}

<% ((k - 1)..2).each{ m -> %>
/**
 * Class that may contain one of $m variants of different types in immutable fashion
 */
sealed class EitherOf${m}< ${m.join{ "out T$it" }} >:
            EitherOf${m+1}< ${m.join{ "T$it" }}, Nothing >() {
    companion object {}
}
<% } /* each m */ %>

<% ((k - 1)..1).each{ m -> %>
/**
 * Class that contains a single variant with index $m and type T
 * @param T the type of boxed value
 * @param value the actual boxed value
 */
data class Variant${m}< T >(override val value: T):
    EitherOf${m+1}< ${m.join{ 'Nothing' }}, T >() {

    override val index get() = $m
}
<% } /* each m */ %>
/**
 * Class that contains a single variant with index 0 and type T
 * @param T the type of boxed value
 * @param value the actual boxed value
 */
data class Variant0<T>(override val value: T):
        EitherOf2<T, Nothing>() {
    override val index get() = 0
}

// Functions

<% (k..2).each{ m -> %>
/**
 * Get the value in this variant using the closest supertype of all types
 */
@Suppress("UNCHECKED_CAST")
fun <T> EitherOf${m}< ${m.join{ 'T' }} >.converge() = value as T
/**
 * Get the value in this variant using the closest supertype of all types supplied to [f]
 */
@Suppress("UNCHECKED_CAST")
fun <T, R> EitherOf${m}< ${m.join{ 'T' }} >.converge(f: (T) -> R) = f(value as T)
<% } /* each m */ %>

<% (k..2).each{ m -> %>
<% def Tlist = (0..<m).collect{ "T$it" } %>
<% def Ts = Tlist.join(', ') %>
<%     (0..<m).each{ n -> %>
@Suppress("UNCHECKED_CAST")
fun < $Ts, R > EitherOf${m}< $Ts >.map${n}(f: (T${n}) -> R) =
    when(this) {
        is Variant${n} -> Variant${n}(f(value))
        else -> this as EitherOf${m}< ${m.join{ it == n ? "R" : "T$it" }} >
    }
<%     } /* each n */ %>
<% } /* each m */ %>

<% (k..2).each{ m -> %>
<% def TList = (0..<m).collect{ "T$it" } %>
<% def FullType = "EitherOf$m <${TList.join(', ')}>" %>
operator fun < ${m.join{"T$it: Comparable<T$it>"}} >  ${FullType}.compareTo(that: ${FullType}): Int {
    val ixs = index.compareTo(that.index)
    if(ixs != 0) return ixs

    @Suppress("UNCHECKED_CAST")
    return (value as Comparable<Any?>).compareTo(that.value as Comparable<Any?>)
}
fun < ${m.join{"T$it: Comparable<T$it>"}} > EitherOf${m}.Companion.comparator() =
    object: Comparator<$FullType> {
        override fun compare(a: $FullType, b: $FullType) = a.compareTo(b)
    }

<% } /* each m */ %>
