@file:Suppress("UNUSED_PARAMETER", "NOTHING_TO_INLINE")
package ru.spbstu.ktuples;
<%
def k = number
%>

// Class declarations
sealed class VariantBase {
    abstract val value: Any?
    abstract val index: Int
}

fun<T> Variant(index: Int, value: T): VariantBase = when(index) {
<% ((k - 1)..0).each{ m -> %>
    $m -> Variant${m} (value)
<% } /* each m */ %>
    else -> throw IllegalArgumentException("Index \$index too big: max value is ${k - 1}")
}

sealed class EitherOf${k}< ${(0..<k).collect{ "out T$it" }.join(', ')} >: VariantBase() {
    companion object {}
}

<% ((k - 1)..2).each{ m -> %>
sealed class EitherOf${m}< ${(0..<m).collect{ "out T$it" }.join(', ')} >:
            EitherOf${m+1}< ${(0..<m).collect{ "T$it" }.join(', ')}, Nothing >() {
    companion object {}
}
<% } /* each m */ %>

<% ((k - 1)..1).each{ m -> %>
data class Variant${m}< T >(override val value: T):
    EitherOf${m+1}< ${(0..<m).collect{ 'Nothing' }.join(', ')}, T >() {

    override val index get() = $m
}
<% } /* each m */ %>

data class Variant0<T>(override val value: T):
        EitherOf2<T, Nothing>() {
    override val index get() = 0
}

// Functions

<% (k..2).each{ m -> %>
@Suppress("UNCHECKED_CAST")
fun <T> EitherOf${m}< ${(0..<m).collect{ 'T' }.join(', ')} >.converge() = value as T
@Suppress("UNCHECKED_CAST")
fun <T, R> EitherOf${m}< ${(0..<m).collect{ 'T' }.join(', ')} >.converge(f: (T) -> R) = f(value as T)
<% } /* each m */ %>

<% (k..2).each{ m -> %>
<% def Tlist = (0..<m).collect{ "T$it" } %>
<% def Ts = Tlist.join(', ') %>
<%     (0..<m).each{ n -> %>
@Suppress("UNCHECKED_CAST")
fun < $Ts, R > EitherOf${m}< $Ts >.map${n}(f: (T${n}) -> R) =
    when(this) {
        is Variant${n} -> Variant${n}(f(value))
        else -> this as EitherOf${m}< ${Tlist.collect{ it == "T$n" ? "R" : it }.join(', ')} >
    }
<%     } /* each n */ %>
<% } /* each m */ %>

<% (k..2).each{ m -> %>
<% def TList = (0..<m).collect{ "T$it" } %>
<% def FullType = "EitherOf$m <${TList.join(', ')}>" %>
operator fun < ${TList.collect{"$it: Comparable<$it>"}.join(', ')} >  ${FullType}.compareTo(that: ${FullType}): Int {
    val ixs = index.compareTo(that.index)
    if(ixs != 0) return ixs

    @Suppress("UNCHECKED_CAST")
    return (value as Comparable<Any?>).compareTo(that.value as Comparable<Any?>)
}
fun < ${TList.collect{"$it: Comparable<$it>"}.join(', ')} >  EitherOf${m}.Companion.comparator() =
    object: Comparator<$FullType> {
        override fun compare(a: $FullType, b: $FullType) = a.compareTo(b)
    }

<% } /* each m */ %>
